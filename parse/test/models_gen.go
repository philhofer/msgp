package test

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *DefType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = DefType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DefType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DefType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DefType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = DefType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DefType) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TestStruct) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Str":
			z.Str, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Str")
				return
			}
		case "Alias":
			z.Alias, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Alias")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TestStruct) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Str"
	err = en.Append(0x82, 0xa3, 0x53, 0x74, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Str)
	if err != nil {
		err = msgp.WrapError(err, "Str")
		return
	}
	// write "Alias"
	err = en.Append(0xa5, 0x41, 0x6c, 0x69, 0x61, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Alias)
	if err != nil {
		err = msgp.WrapError(err, "Alias")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TestStruct) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Str"
	o = append(o, 0x82, 0xa3, 0x53, 0x74, 0x72)
	o = msgp.AppendString(o, z.Str)
	// string "Alias"
	o = append(o, 0xa5, 0x41, 0x6c, 0x69, 0x61, 0x73)
	o = msgp.AppendString(o, z.Alias)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TestStruct) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Str":
			z.Str, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Str")
				return
			}
		case "Alias":
			z.Alias, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Alias")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TestStruct) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Str) + 6 + msgp.StringPrefixSize + len(z.Alias)
	return
}
